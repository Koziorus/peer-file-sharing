{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "CMake Build",
            "type": "shell",
            "command": "cmake --build build --target all",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": ["$gcc"],
            "detail": "Build the CMake project"
        },
        {
            "label": "Run Valgrind with GDB",
            "type": "shell",
            "command": "stdbuf -i0 -o0 -e0 valgrind --vgdb=yes --vgdb-error=0 --leak-check=full ${command:cmake.launchTargetPath} 1> ${workspaceFolder}/build/valgrind_log", // run valgrind without need to flush stdio when writing stdout to file 
            "isBackground": true,
            "problemMatcher": [
                {
                    "base": "$gcc",
                    "background": {
                        "activeOnStart": false,
                        "beginsPattern": "target remote | /usr/bin/vgdb", // needed for the launch.json to not wait for the task to finish
                        "endsPattern": "target remote | /usr/bin/vgdb" //
                    }
                }
            ],
            "dependsOrder": "sequence",
            "dependsOn": [
                "Start log tail",
                "CMake Build"
            ]
        }
        ,
        {
            "label": "Start log tail",
            "type": "shell",
            "command": "echo VALGRIND_LOG > ${workspaceFolder}/build/valgrind_log; tail -f ${workspaceFolder}/build/valgrind_log",
            "isBackground": true,
            "presentation": {
                "clear": true
            },
            "problemMatcher": [
                {
                    "base": "$gcc",
                    "background": {
                        "activeOnStart": true,
                        "beginsPattern": ".", // needed for the launch.json to not wait for the task to finish
                        "endsPattern": "." //
                    }
                }
            ]
        }
    ]
}
